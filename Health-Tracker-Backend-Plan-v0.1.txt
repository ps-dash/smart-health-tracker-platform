Project: Smart Health Tracker & Advisory Platform (SHTAP)
===============================
üìÅ Microservice Architecture Overview
===============================
1. USER-SERVICE
    Register/Login (JWT-based)
    Roles: client, Coach, Doctor, Dietitian, Admin (Role enum)
    Search users by name, role, phone, email
    DB: PostgreSQL
2. HEALTH-LOG-SERVICE
    Cli log BP, weight, sugar, etc.
    Coaches can view users' logs
    Flexible schema per user (different parameters)
    DB: MongoDB
    Search logs by date, metric, or tag
3. RECOMMENDATION-SERVICE
    Rule-based recommendations configured by doctor/dietitian/coach
    Rules stored in MongoDB (metric, operator, value, advice)
    Advice returned on log match or explicit request
    Cache frequent recommendations using Redis
4. NOTIFICATION-SERVICE
    Sends reminder emails/messages (Mocked for now)
    Future scope: webhook-based external integration
    DB: PostgreSQL or In-memory

=========================================
Backend User authentication & autherization
=========================================
1. Client registration
    1. Client registered by habit coach will be assigned to him
    2. Admin can register a client and assign a habit coach, dietitians and doctors
    3. Admin can only assign or changes dietitians and doctors to a client who has paid and purchased a specific program. 
    4. Client can register themselves
    5. Habit coach can assign a registered and unassigned client to himself
    6. Admin can change habit coach, dietitians and doctors of registered client
    7. Client registration can be done one or many methods
        1. OAuth2 - Popular auth providers
        2. OTP based
        3. User/name password
    8. Even if one method of auth is done, client can enable other methods too
    9. Client medical resorts can be uploaded by client himself or by habit coach, dietitians or doctor
        1. Not sure home to maintain these files. May be some file system or noSQL db
2. Dietitians and Doctors
    1. As they are internal employees, only Admin can register.
    2. They can login through corporate email/login id ect. 
    3. A SSO and SAML base auth can be used.
    4. They can be maintained through LDAP/Okta or some industry standard methods
3. Dietitians and Doctors can log data on client progress like change in weight. Improvement in health ect.
    1. As the history has to be maintained, we can use noSQL
4. Habit Coaches
    1. They are business partners to RW
    2. They can be registered by another habit coach who is mentoring him or by admin and assign a habit coach
    3. Except RW founder, everyone will have a mentor habit coach
    4. So it‚Äôll be a tree like structure
    5. There will be visualizations available for them to see client results and stats (Future work)
    
===============================
üõ†Ô∏è Tech Stack
===============================
Java 17, Spring Boot, Spring Security, Spring AOP (logging, auditing)
Spring Transactions (multi-operation safety), JPA, Hibernate
PostgreSQL (structured modules), MongoDB (flexible data), Redis (cache)
Docker, JUnit5, Mockito, Maven, SonarQube
WebSocket (Phase 2: for real-time chat or live updates)
===============================
üß© API CONTRACTS
===============================
--- USER-SERVICE ---
POST /api/users/register           ‚Üí Register user
POST /api/users/login              ‚Üí Login and return JWT
GET  /api/users/profile            ‚Üí Get logged-in user profile
GET  /api/users/role/{id}          ‚Üí Get user role
GET  /api/users/search             ‚Üí Search users by name/role
--- HEALTH-LOG-SERVICE ---
POST /api/health-logs              ‚Üí Create a log entry
GET  /api/health-logs/user/{id}    ‚Üí Fetch all logs of user
GET  /api/health-logs/today        ‚Üí Fetch today‚Äôs log for logged-in user
GET  /api/health-logs/search       ‚Üí Search logs by date/metric
--- RECOMMENDATION-SERVICE ---
GET  /api/recommendation/{userId}  ‚Üí Get lifestyle suggestions
POST /api/recommendation/setup     ‚Üí Set rules (Coach/Doctor)
--- NOTIFICATION-SERVICE ---
POST /api/notify/email             ‚Üí Send email reminder (mocked)
===============================
‚úÖ Next Steps
===============================
1. Create GitHub repo structure
2. Scaffold USER-SERVICE
3. Add Spring Security with JWT
4. Write unit tests for UserController
5. Dockerize the service
6. Integrate Redis cache for recommendations
7. Use AOP for logging/auditing and Transactions for data safety
8. Plan for WebSocket (Phase 2): real-time chat, alerting, dashboards