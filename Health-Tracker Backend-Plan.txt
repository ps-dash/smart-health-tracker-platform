// Project: Smart Health Tracker & Advisory Platform

// ===============================
// üìÅ Microservice Architecture Overview
// ===============================

// 1. USER-SERVICE
//    - Register/Login (JWT-based)
//    - Roles: client, Coach, Doctor, Dietitian, Admin (Role enum)
//    - Search users by name, role, phone, email
//    - DB: PostgreSQL

// 2. HEALTH-LOG-SERVICE
//    - Cli log BP, weight, sugar, etc.
//    - Coaches can view users' logs
//    - Flexible schema per user (different parameters)
//    - DB: MongoDB
//    - Search logs by date, metric, or tag

// 3. RECOMMENDATION-SERVICE
//    - Rule-based recommendations configured by doctor/dietitian/coach
//    - Rules stored in MongoDB (metric, operator, value, advice)
//    - Advice returned on log match or explicit request
//    - Cache frequent recommendations using Redis

// 4. NOTIFICATION-SERVICE
//    - Sends reminder emails/messages (Mocked for now)
//    - Future scope: webhook-based external integration
//    - DB: PostgreSQL or In-memory

// ===============================
// üõ†Ô∏è Tech Stack
// ===============================
// Java 17, Spring Boot, Spring Security, Spring AOP (logging, auditing)
// Spring Transactions (multi-operation safety), JPA, Hibernate
// PostgreSQL (structured modules), MongoDB (flexible data), Redis (cache)
// Docker, JUnit5, Mockito, Maven, SonarQube
// WebSocket (Phase 2: for real-time chat or live updates)

// ===============================
// üß© API CONTRACTS
// ===============================

// --- USER-SERVICE ---
// POST /api/users/register           ‚Üí Register user
// POST /api/users/login              ‚Üí Login and return JWT
// GET  /api/users/profile            ‚Üí Get logged-in user profile
// GET  /api/users/role/{id}          ‚Üí Get user role
// GET  /api/users/search             ‚Üí Search users by name/role

// --- HEALTH-LOG-SERVICE ---
// POST /api/health-logs              ‚Üí Create a log entry
// GET  /api/health-logs/user/{id}    ‚Üí Fetch all logs of user
// GET  /api/health-logs/today        ‚Üí Fetch today‚Äôs log for logged-in user
// GET  /api/health-logs/search       ‚Üí Search logs by date/metric

// --- RECOMMENDATION-SERVICE ---
// GET  /api/recommendation/{userId}  ‚Üí Get lifestyle suggestions
// POST /api/recommendation/setup     ‚Üí Set rules (Coach/Doctor)

// --- NOTIFICATION-SERVICE ---
// POST /api/notify/email             ‚Üí Send email reminder (mocked)

// ===============================
// ‚úÖ Next Steps
// ===============================
// 1. Create GitHub repo structure
// 2. Scaffold USER-SERVICE
// 3. Add Spring Security with JWT
// 4. Write unit tests for UserController
// 5. Dockerize the service
// 6. Integrate Redis cache for recommendations
// 7. Use AOP for logging/auditing and Transactions for data safety
// 8. Plan for WebSocket (Phase 2): real-time chat, alerting, dashboards
